name: Build and Deploy to AWS Lambda

on:
  push:
    branches:
      - main
      - dev-test-aws
    paths-ignore:
      - "README.md"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latests

    env:
      AWS_REGION: eu-west-2
      AWS_ACCOUNT_ID: 349523694179
      IMAGE_REPO_NAME: emotion-detection
      IMAGE_TAG: latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR Repository Exists
        run: |
          aws ecr describe-repositories --repository-names ${{ env.IMAGE_REPO_NAME }} || \
          aws ecr create-repository --repository-name ${{ env.IMAGE_REPO_NAME }}

      - name: Install Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Authenticate Docker to Amazon ECR
        run: |
          echo "Authenticating Docker to Amazon ECR..."
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build and Push Docker Image
        run: |
          echo "Building and pushing the Docker image..."
          docker buildx build --platform linux/amd64 \
            --push \
            --provenance=false \
            -t ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_REPO_NAME }}:${{ env.IMAGE_TAG }} .
      
      - name: Check Image Manifest
        run: |
          echo "Checking the image manifest..."
          aws ecr batch-get-image --repository-name ${{ env.IMAGE_REPO_NAME }} \
            --image-ids imageTag=${{ env.IMAGE_TAG }} \
            --query 'images[].imageManifest' --output text > manifest.json
          if grep -q 'vnd.docker.distribution.manifest.v2+json' manifest.json; then
            echo "Manifest is valid for AWS Lambda."
          else
            echo "Manifest validation failed. Found: $(cat manifest.json)" && exit 1
          fi

      - name: Check if Lambda Function Exists
        id: check-lambda
        run: |
          echo "Checking if the Lambda function exists.."
          aws lambda get-function --function-name emotion-detection || exit 1
        continue-on-error: true

      - name: Deploy to Lambda
        if: steps.check-lambda.outcome == 'success'
        run: |
          echo "Updating AWS Lambda function..."
          aws lambda update-function-code \
            --function-name emotion-detection \
            --image-uri ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_REPO_NAME }}:${{ env.IMAGE_TAG }}
      - name: Create Lambda Function
        if: steps.check-lambda.outcome != 'success'
        run: |
          echo "Creating AWS Lambda function..."
          aws lambda create-function \
            --function-name emotion-detection \
            --package-type Image \
            --code ImageUri=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_REPO_NAME }}:${{ env.IMAGE_TAG }} \
            --role arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/lambda-s3 \
            --memory-size 3008 \
            --timeout 30 \
            --region ${{ env.AWS_REGION }}

      - name: Validate Lambda Deployment
        run: |
          echo "Validating the Lambda function deployment..."
          aws lambda get-function --function-name emotion-detection

      - name: Deploy API Gateway
        run: |
          aws apigateway create-deployment \
            --rest-api-id 9fuctupzoj \
            --stage-name prod
